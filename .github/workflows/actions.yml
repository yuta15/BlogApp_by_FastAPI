name: Run test when pushed code
run-name: ${{ github.actor }} is pushed!!!!!!

on: [push]

jobs:
    Blog_app_job:
        name: Blog app job
        runs-on: ubuntu-latest
        environment: Dev
        env:
            ENV: 'Dev'
            ALGORITHM: ${{ secrets.ALGORITHM }}
            DB_USERNAME: ${{ secrets.DB_USERNAME }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD}}
            DB_HOSTNAME: '127.0.0.1'
            DB_PORT: 3306
            DB_NAME: ${{ vars.MYSQL_DATABASE }}

        services:
            db:
                image: mysql:latest
                ports:
                    - 3306:3306
                env:
                    MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
                    MYSQL_DATABASE: ${{ vars.MYSQL_DATABASE }}
                    MYSQL_USER: ${{ secrets.DB_USERNAME }}
                    MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
                volumes:
                  - /tmp/docker/db/initdb.d:/docker-entrypoint-initdb.d 
                options: >-
                    --health-cmd="mysqladmin ping --silent"
                    --health-interval=10s
                    --health-timeout=5s
                    --health-retries=30

        steps:
            - name: check dir
              run: |
                   ls -la &&\
                   pwd

            - name: Check out repository code
              uses: actions/checkout@v4


            - name: Copy init-db file
              run: sudo cp -r docker/db/initdb.d/* /tmp/docker/db/initdb.d

            - name: Check tmp dir
              working-directory: /tmp
              run : sudo ls -la docker
              
            - name: chmod
              working-directory: /tmp
              run: sudo chmod -R 755 docker

            - name: Check tmp dir
              working-directory: /tmp
              run : sudo ls -la docker

            - name: Docker restart
              run: |
                    docker stop ${{ job.services.db.id }} &&\
                    docker start ${{ job.services.db.id }}
            
            - name: Docker logs
              run: docker logs ${{ job.services.db.id }}

            - name: Install mysql-client
              run: sudo apt-get update && sudo apt-get install -y mysql-client

            - name: Check restart SQL
              run: |
                  for i in {1..30}; do
                    mysqladmin ping -h"$DB_HOSTNAME" --silent && break
                    echo "Waiting for MySQL..."
                    sleep 2
                  done
            

            - name: install dependencies
              working-directory: docker/app
              run: |
                   ls -la &&\
                   pwd &&\
                   pip install --upgrade pip &&\
                   pip install -r requirements.txt
            
            - name: execute test
              run: pytest -svv
