name: Run test when pushed code
run-name: ${{ github.actor }} is pushed!!!!!!

on: [push]

jobs:
    Blog_app_job:
        name: Blog app job
        runs-on: ubuntu-latest
        env:
            ENV: 'Dev'
            ALGORITHM: ${{ secrets.ALGORITHM }}
            DB_USERNAME: ${{ secrets.DB_USERNAME }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD}}
            DB_HOSTNAME: 'db'
            DB_PORT: 3306
            DB_NAME: ${{ vars.MYSQL_DATABASE }}

        services:
            db:
                image: mysql:latest
                ports:
                    - 3306:3306
                env:
                    MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
                    MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
                    MYSQL_USER: ${{ secrets.DB_USERNAME }}
                    MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}
                # options: >-
                #     --health-cmd="mysqladmin ping --silent"
                #     --health-interval=10s
                #     --health-timeout=5s
                #     --health-retries=30

        steps:
            - name: Check out repository code
              uses: actions/checkout@v4
            
            - name: print env
              run: echo "DB_USERNAME=${DB_USERNAME}"


            - name: check current_dir
              run: ls -la
            
            - name: install dependencies
              working-directory: docker/app
              run: |
                   ls -la &&\
                   pip install --upgrade pip &&\
                   pip install -r requirements.txt
            
            - name: Install mysql-client
              run: apt-get update && sudo apt-get install -y mysql-client
            
            - name: Wait for MySQL to be ready
              run: |
                  for i in {1..30}; do
                    mysqladmin ping -h"$DB_HOSTNAME" --silent && break
                    echo "Waiting for MySQL..."
                    sleep 2
                  done

            - name: execute test
              run: pytest -svv
